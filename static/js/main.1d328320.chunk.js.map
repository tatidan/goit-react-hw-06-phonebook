{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/store.js","components/contactsForm/ContactsForm.js","components/contacts/ContactsList.js","components/searchForm/SearchForm.js","components/section/Section.js","App.js","index.js"],"names":["addNewContact","createAction","payload","name","number","id","removeContact","onSearchFilter","contacts","createReducer","state","action","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ContactsForm","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","find","contact","alert","shortid","generate","reset","className","onSubmit","this","type","onChange","placeholder","pattern","title","required","Component","connect","dispatch","newName","onFilterRender","allContacts","normalizedFilter","toLowerCase","includes","map","onClick","onSearchHandler","target","Section","children","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1d328320.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addNewContact = createAction(\r\n  \"contacts/add\",\r\n  ({ name, number, id }) => ({\r\n    payload: {\r\n      name,\r\n      number,\r\n      id,\r\n    },\r\n  })\r\n);\r\n\r\nexport const removeContact = createAction(\"contacts/remove\");\r\nexport const onSearchFilter = createAction(\"contacts/searchFilter\");\r\n\r\n//====================================================\r\n\r\n// import types from \"../contacts/contacts-types\";\r\n\r\n// export const addNewContact = createAction(\r\n//   types.ADD_CONTACT,\r\n//   ({ name, number, id }) => ({\r\n//     payload: {\r\n//       name,\r\n//       number,\r\n//       id,\r\n//     },\r\n//   })\r\n// );\r\n\r\n// export const removeContact = createAction(types.REMOVE_CONTACT);\r\n\r\n// export const onSearchFilter = createAction(types.SEARCH_FILTER);\r\n\r\n// export const addNewContact = ({ name, number, id }) => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: {\r\n//     name,\r\n//     number,\r\n//     id,\r\n//   },\r\n// });\r\n\r\n// export const removeContact = (id) => ({\r\n//   type: types.REMOVE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// export const onSearchFilter = (value) => ({\r\n//   type: types.SEARCH_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addNewContact } from \"./contacts-actions\";\r\nimport { onSearchFilter } from \"./contacts-actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [addNewContact]: (state, action) => [...state, action.payload],\r\n  \"contacts/remove\": (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [onSearchFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ contacts, filter });\r\n\r\n//====================================================\r\n\r\n// import types from \"./contacts-types\";\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       return [...state, payload];\r\n//     case types.REMOVE_CONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.SEARCH_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n//const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/searchFilter\":\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"../contacts/contacts-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: { contacts: persistReducer(contactsPersistConfig, contactsReducer) },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n//====================================================\r\n\r\n// import { createStore } from \"redux\";\r\n// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import counterReducer from \"./counter/counter-reducer\";\r\n// import { combineReducers } from \"redux\";\r\n\r\n// const persistConfig = {\r\n//   key: \"root\",\r\n//   storage,\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n//const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// const rootReducer = combineReducers({\r\n//   // counter: counterReducer,\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const store = configureStore({\r\n//   reducer: { contacts: persistReducer(contactsPersistConfig, contactsReducer) },\r\n//   // reducer: { contacts: persistReducer(persistConfig, contactsReducer) },\r\n//   // reducer: rootReducer,\r\n//   // reducer: persistedReducer,\r\n//   // reducer: {\r\n//   //   contacts: contactsReducer,\r\n//   // },\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === \"development\",\r\n// });\r\n\r\n// export default store;\r\n","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewContact } from \"../../redux/contacts/contacts-actions\";\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.contacts.contacts.find(\r\n      (contact) => contact.name === this.state.name\r\n    )\r\n      ? alert(`Contact with the name ${this.state.name} already exists.`)\r\n      : this.props.addNewContact({ ...this.state, id: shortid.generate() });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"formLabel\">\r\n          Name\r\n          <input\r\n            className=\"nameInput\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            id={this.id}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"formLabel\">\r\n          Phone number\r\n          <input\r\n            className=\"phoneInput\"\r\n            type=\"text\"\r\n            name=\"number\"\r\n            placeholder=\"enter phone number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className=\"submitBtn\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addNewContact: (newName) => dispatch(addNewContact(newName)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeContact } from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst ContactsList = ({ contacts, removeContact }) => {\r\n  return (\r\n    <ul className=\"contactsList\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className=\"contactsListItem\" id={id} key={id}>\r\n          <b className=\"contactName\">{name}:</b>\r\n          {number}\r\n          <button\r\n            className=\"deleteBtn\"\r\n            type=\"button\"\r\n            onClick={() => removeContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst onFilterRender = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { contacts, filter } }) => ({\r\n  contacts: onFilterRender(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  removeContact: (id) => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\n//============================================================\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const { filter, contacts } = state.contacts;\r\n//   const filteredContacts = onFilterRender(contacts, filter);\r\n\r\n//   return { contacts: filteredContacts };\r\n// };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { onSearchFilter } from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst SearchForm = ({ onSearchHandler, filter }) => {\r\n  return (\r\n    <label className=\"searchFormLabel\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"searchField\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"enter name\"\r\n        value={filter}\r\n        onChange={onSearchHandler}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchHandler: (e) => dispatch(onSearchFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\r\n","import React from \"react\";\r\nimport \"./Section.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2 className=\"sectionTitle\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\nimport ContactsForm from \"./components/contactsForm/ContactsForm\";\nimport ContactsList from \"./components/contacts/ContactsList\";\nimport SearchForm from \"./components/searchForm/SearchForm\";\nimport Section from \"./components/section/Section\";\nimport \"./index.css\";\n\nconst App = () => {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactsForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <SearchForm />\n        <ContactsList />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n//===============================================================\n\n// import React, { Component } from 'react';\n\n// class App extends Component {\n// state = {\n// contacts: [\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n// ],\n// filter: \"\",\n// };\n\n// onNameCheck = (newName) => {\n//   return this.state.contacts.filter(\n//     (contact) => contact.name.toLowerCase() === newName.toLowerCase()\n//   );\n// };\n\n// addNewContact = (contact) => {\n//   this.setState((prev) => ({\n//     contacts: [...prev.contacts, contact],\n//   }));\n// };\n\n// removeContact = (id) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter((contact) => contact.id !== id),\n//   }));\n// };\n\n// onSearchFilter = (e) => {\n//   this.setState({ filter: e.currentTarget.value });\n// };\n\n// componentDidMount() {\n//   // const contacts = localStorage.getItem(\"contacts\");\n//   const parsedContacts = JSON.parse(contacts);\n//   if (parsedContacts) {\n//     this.setState({ contacts: parsedContacts });\n//   }\n// }\n\n// componentDidUpdate(prevProps, prevState) {\n//   if (this.state.contacts !== prevState.contacts) {\n//     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//   }\n// }\n\n// render() {\n//   return (\n//     <>\n//       <Section title=\"Phonebook\">\n//         <ContactsForm\n// onNameCheck={this.onNameCheck}\n// addNewContact={this.addNewContact}\n//   />\n// </Section>\n// <Section title=\"Contacts\">\n//   <SearchForm\n// onSearchHandler={this.onSearchFilter}\n// filter={this.state.filter}\n// />\n// <ContactsList\n// contacts={filteredContacts}\n// onFilterRender={this.onFilterRender}\n// removeContact={this.removeContact}\n//           />\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/es/integration/react\";\nimport { store } from \"./redux/contacts/store\";\nimport { persistor } from \"./redux/contacts/store\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//================================================================\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <BrowserRouter>\n//         <Provider store={store}>\n//         <App />\n//       </Provider>\n//     </BrowserRouter>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n"],"sourceRoot":""}